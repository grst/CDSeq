m_2 = stats::rmultinom(1,N_2,phi_2)
m = m_1 + m_2
phi = gtools::rdirichlet(1,alpha = (beta_1 + beta_2)/2*precision)
mm = stats::rmultinom(1,N_1+N_2,phi)
plot(log2(m),log2(mm))
abline(a=0,b=1)
precision = 1e8
N_1 = 1e3
N_2 = 1e2
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_2 = gtools::rdirichlet(1,alpha = beta_2*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_2 = stats::rmultinom(1,N_2,phi_2)
m = m_1 + m_2
phi = gtools::rdirichlet(1,alpha = (beta_1 + beta_2)/2*precision)
mm = stats::rmultinom(1,N_1+N_2,phi)
plot(log2(m),log2(mm))
abline(a=0,b=1)
precision = 1e10
N_1 = 1e3
N_2 = 1e2
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_2 = gtools::rdirichlet(1,alpha = beta_2*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_2 = stats::rmultinom(1,N_2,phi_2)
m = m_1 + m_2
phi = gtools::rdirichlet(1,alpha = (beta_1 + beta_2)/2*precision)
mm = stats::rmultinom(1,N_1+N_2,phi)
plot(log2(m),log2(mm))
abline(a=0,b=1)
N_1 = 1e5
N_2 = 1e7
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_2 = gtools::rdirichlet(1,alpha = beta_2*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_2 = stats::rmultinom(1,N_2,phi_2)
m = m_1 + m_2
phi = gtools::rdirichlet(1,alpha = (beta_1 + beta_2)/2*precision)
mm = stats::rmultinom(1,N_1+N_2,phi)
plot(log2(m),log2(mm))
abline(a=0,b=1)
precision = 1e3
N_1 = 1e5
N_2 = 1e7
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_2 = gtools::rdirichlet(1,alpha = beta_2*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_2 = stats::rmultinom(1,N_2,phi_2)
m = m_1 + m_2
phi = gtools::rdirichlet(1,alpha = (beta_1 + beta_2)/2*precision)
mm = stats::rmultinom(1,N_1+N_2,phi)
plot(log2(m),log2(mm))
abline(a=0,b=1)
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_11 = gtools::rdirichlet(1,alpha = beta_1*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_11 = stats::rmultinom(1,N_1,phi_11)
plot(log2(m_1),log2(m_11))
abline(a=0,b=1)
precision = 1e2
N_1 = 1e5
N_2 = 1e7
phi_1 = gtools::rdirichlet(1,alpha = beta_1*precision)
phi_11 = gtools::rdirichlet(1,alpha = beta_1*precision)
m_1 = stats::rmultinom(1,N_1,phi_1)
m_11 = stats::rmultinom(1,N_1,phi_11)
plot(log2(m_1),log2(m_11))
abline(a=0,b=1)
mr_all_test = readRDS("~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/MR_all_test_2021_08_01_14_43_22.rds")
###################################################################
##  RMSE variations for estimated GEPs when precision increases  ##
###################################################################
mr_rmse_gep = lapply(mr_all_test, "[[", "rmse")
mr_precisons = lapply(mr_all_test, "[[", "precision")
mr_sample_ids = lapply(mr_all_test, "[[", "sample_id")
mr_gep_df = data.frame(RMSE = unlist(mr_rmse_gep), Precision = unlist(mr_precisons), Sample_id = unlist(mr_sample_ids))
mr_gep_rmse_plot = ggplot(mr_gep_df, aes(x=Precision,y=RMSE,color=Sample_id, group=Sample_id)) + geom_point() + geom_line() +
guides(col = guide_legend(ncol = 2)) +
labs(title = "RMSE variations for estimated GEPs when precision increases for each sample")
library(ggplot2)
mr_gep_rmse_plot = ggplot(mr_gep_df, aes(x=Precision,y=RMSE,color=Sample_id, group=Sample_id)) + geom_point() + geom_line() +
guides(col = guide_legend(ncol = 2)) +
labs(title = "RMSE variations for estimated GEPs when precision increases for each sample")
mr_gep_rmse_plot
# compare with base RMSE
mr_RMSE_var = lapply(mr_all_test, FUN = function(x){
base_gep = c(AD_cell)
base_rmse = sqrt(mean(sum((x$true_gep - base_gep)^2)))
base_error = x$true_gep - base_gep
rmse_deviation = x$rmse - base_rmse
value = list()
value$base_rmse = base_rmse
value$base_error = base_error
value$rmse_deviation = rmse_deviation
return(value)
})
###########################################################################
###########################################################################
###                                                                     ###
###        RESULTS ON TESTING ALL 48 MR SAMPLES WITH 1000+ GENES        ###
###                                                                     ###
###########################################################################
###########################################################################
##################################################################
##                using AD snRNAseq as reference                ##
##################################################################
AD_data = readRDS("~/Dropbox/Public/MIT/Yongjin_brain_2018-05-03/AD.scRNA.Yongjin.rds")
AD_gep  = t(rowsum(t(as.matrix(AD_data$counts)), group = AD_data$colAnnotations$broad.cell.type))
#################################################################
##                       process MR data                       ##
#################################################################
mr_files = list.files("~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Data/multiregion_data/MR_data", full.names = TRUE)
names(mr_files) = sub("\\..*","",basename(mr_files))
mr_data_AG = lapply(mr_files, FUN = function(x){
all_data = readRDS(x)
sample_id = sub("\\..*","",basename(x))
region_bulk = all_data[["sampleid_region_bulk"]][,"AG",drop=FALSE]
region_truth = lapply(all_data[["sampleid_region_groundtruth"]],'[[',"AG") # grab ground truth for AG region
value = list()
value$bulk = region_bulk
value$truth = region_truth
value$sample_id = sample_id
return(value)
})
# take marker genes for testing
major_markers_df = readxl::read_excel(path = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Data/marker_genes/Multiregion/Marker_genes_major_cell_types.xlsx")
top_n = 100
major_top_marker = lapply(unique(major_markers_df$cluster),
FUN = function(x){
cidx = which(major_markers_df$cluster == x)
return(major_markers_df$gene[cidx[1:top_n]])
})
major_markers = unlist(major_top_marker)
marker_idx = which(rownames(mr_data_AG$`10291856`$bulk) %in% major_markers)
# get common genes
filtered_genes = CDSeq:::intersection(list.vector = list(rownames(mr_data_AG$`10291856`$bulk),
rownames(AD_gep),major_markers), order = "stable")
MR_gene_idx = filtered_genes$index[[1]]
AD_gene_idx = filtered_genes$index[[2]]
AD_cell = t(t(AD_gep[AD_gene_idx,c(1,3,4,5,6,7,2)])/colSums(AD_gep[AD_gene_idx,c(1,3,4,5,6,7,2)]))
dim(AD_cell)
# compare with base RMSE
mr_RMSE_var = lapply(mr_all_test, FUN = function(x){
base_gep = c(AD_cell)
base_rmse = sqrt(mean(sum((x$true_gep - base_gep)^2)))
base_error = x$true_gep - base_gep
rmse_deviation = x$rmse - base_rmse
value = list()
value$base_rmse = base_rmse
value$base_error = base_error
value$rmse_deviation = rmse_deviation
return(value)
})
##########################################################################
##  RMSE variations for estimated proportions when precision increases  ##
##########################################################################
precision = seq(100,10000,100)
itr = length(precision)*length(mr_data_AG)
itr_mat = data.frame(p_idx = rep(1:length(precision),each=length(mr_data_AG)),
d_idx = rep(1:length(mr_data_AG),length(precision)))
mr_precisons = lapply(mr_all_test, "[[", "precision")
mr_sample_ids = lapply(mr_all_test, "[[", "sample_id")
mr_prop_rmse = parallel::mclapply(1:itr,FUN = function(x){
true_prop = mr_data_AG[[ itr_mat$d_idx[[x]] ]][["truth"]]
true_prop = matrix(unlist(true_prop), ncol = 7)
true_prop = colSums(true_prop)/sum(true_prop)
est_prop = mr_all_test[[x]]$estProp
prop_rmse = sqrt(mean(sum((true_prop - est_prop)^2)))
return(prop_rmse)
},mc.cores = 10)
mr_prop_df = data.frame(RMSE = unlist(mr_prop_rmse), Precision = unlist(mr_precisons), Sample_id = unlist(mr_sample_ids))
mr_prop_rmse_plot = ggplot(mr_prop_df, aes(x=Precision,y=RMSE,color=Sample_id, group=Sample_id)) + geom_point() + geom_line() +
guides(col = guide_legend(ncol = 2)) +
labs(title = "RMSE variations for estimated Proportions when precision increases for each sample")
mr_prop_rmse_plot
#################################################################
##   Pearson correlation variations when precision increases   ##
#################################################################
mr_precisons = lapply(mr_all_test, "[[", "precision")
mr_sample_ids = lapply(mr_all_test, "[[", "sample_id")
mr_prop_cor = parallel::mclapply(1:itr,FUN = function(x){
true_prop = mr_data_AG[[ itr_mat$d_idx[[x]] ]][["truth"]]
true_prop = matrix(unlist(true_prop), ncol = 7)
true_prop = colSums(true_prop)/sum(true_prop)
est_prop = mr_all_test[[x]]$estProp
prop_cor = cor(true_prop,est_prop)
return(prop_cor)
},mc.cores = 10)
mr_gep_cor = parallel::mclapply(1:itr,FUN = function(x){
est_gep = mr_all_test[[x]]$est_gep
true_gep = mr_all_test[[x]]$true_gep
gep_cor = cor(true_gep,est_gep)
return(gep_cor)
},mc.cores = 10)
mr_gep_cor_df = data.frame(Correlation = unlist(mr_gep_cor), Precision = unlist(mr_precisons), Sample_id = unlist(mr_sample_ids))
mr_gep_cor_plot = ggplot(mr_gep_cor_df, aes(x=Precision,y=Correlation,color=Sample_id, group=Sample_id)) + geom_point() + geom_line() +
guides(col = guide_legend(ncol = 2)) +
labs(x="Precision",y="Pearson Correlation",title = "Pearson correlation variations")
mr_gep_cor_plot
mr_prop_cor_df = data.frame(Correlation = unlist(mr_prop_cor), Precision = unlist(mr_precisons), Sample_id = unlist(mr_sample_ids))
mr_prop_cor_plot = ggplot(mr_prop_cor_df, aes(x=Precision,y=Correlation,color=Sample_id, group=Sample_id)) + geom_point() + geom_line() +
guides(col = guide_legend(ncol = 2)) +
labs(title = "Pearson correlation variations")
mr_prop_cor_plot
#####################################################################
##  Spearman rank correlation variations when precision increases  ##
#####################################################################
mr_est_gep = lapply(mr_all_test, "[[", "est_gep")
mr_true_gep = lapply(mr_all_test, "[[", "true_gep")
mr_precisons = lapply(mr_all_test, "[[", "precision")
mr_sample_ids = lapply(mr_all_test, "[[", "sample_id")
mr_gep_df = data.frame(TrueGEP = unlist(mr_true_gep),
estGEP = unlist(mr_est_gep),
Precision = rep(unlist(mr_precisons),each=7042),
Sample_id = rep(unlist(mr_sample_ids),each=7042),
Gene = rep(filtered_genes$comm.value,7*4800))
mr_cor_gep_all = parallel::mclapply(unique(unlist(mr_precisons)), FUN = function(x){
df = mr_gep_df %>% filter(Precision == x)
mr_genes = filtered_genes$comm.value
names(mr_genes) = filtered_genes$comm.value
value = lapply(mr_genes, FUN = function(y){
gene_df = df %>% filter(Gene == y)
gene_cor_pearson = cor(gene_df$TrueGEP, gene_df$estGEP, method = "pearson")
gene_cor_spearman = cor(gene_df$TrueGEP, gene_df$estGEP, method = "spearman")
value = list()
value$pearson = gene_cor_pearson
value$spearman = gene_cor_spearman
return(value)
})
return(value)
},mc.cores = 10)
length(filtered_genes$comm.value)
head(mr_gep_df)
mr_cor_gep_all = parallel::mclapply(unique(unlist(mr_precisons)), FUN = function(x){
df = mr_gep_df %>% filter(Precision == x)
mr_genes = filtered_genes$comm.value
names(mr_genes) = filtered_genes$comm.value
value = lapply(mr_genes, FUN = function(y){
gene_df = df %>% filter(Gene == y)
gene_cor_pearson = cor(gene_df$TrueGEP, gene_df$estGEP, method = "pearson")
gene_cor_spearman = cor(gene_df$TrueGEP, gene_df$estGEP, method = "spearman")
value = list()
value$pearson = gene_cor_pearson
value$spearman = gene_cor_spearman
return(value)
})
return(value)
},mc.cores = 5)
mr_cor_gep_all = lapply(unique(unlist(mr_precisons)), FUN = function(x){
df = mr_gep_df %>% filter(Precision == x)
mr_genes = filtered_genes$comm.value
names(mr_genes) = filtered_genes$comm.value
value = lapply(mr_genes, FUN = function(y){
gene_df = df %>% filter(Gene == y)
gene_cor_pearson = cor(gene_df$TrueGEP, gene_df$estGEP, method = "pearson")
gene_cor_spearman = cor(gene_df$TrueGEP, gene_df$estGEP, method = "spearman")
value = list()
value$pearson = gene_cor_pearson
value$spearman = gene_cor_spearman
return(value)
})
return(value)
})
library(dplyr)
mr_cor_gep_all = parallel::mclapply(unique(unlist(mr_precisons)), FUN = function(x){
df = mr_gep_df %>% filter(Precision == x)
mr_genes = filtered_genes$comm.value
names(mr_genes) = filtered_genes$comm.value
value = lapply(mr_genes, FUN = function(y){
gene_df = df %>% filter(Gene == y)
gene_cor_pearson = cor(gene_df$TrueGEP, gene_df$estGEP, method = "pearson")
gene_cor_spearman = cor(gene_df$TrueGEP, gene_df$estGEP, method = "spearman")
value = list()
value$pearson = gene_cor_pearson
value$spearman = gene_cor_spearman
return(value)
})
return(value)
},mc.cores = 10)
mr_genes = names(mr_cor_gep_all[[1]])
gene_cor = lapply(mr_cor_gep_all, FUN = function(x){
pearson_cor = lapply(x, "[[","pearson")
spearman_cor = lapply(x, "[[","spearman")
value = list()
value$pearson = pearson_cor
value$spearman = spearman_cor
return(value)
})
mr_cor_df = data.frame(precision = rep(unique(unlist(mr_precisons)),each=128),
gene = rep(mr_genes,100),
pearson = unlist(lapply(gene_cor, "[[","pearson")),
spearman = unlist(lapply(gene_cor, "[[","spearman")))
mr_cor_df = data.frame(precision = rep(unique(unlist(mr_precisons)),each=1006),
gene = rep(mr_genes,100),
pearson = unlist(lapply(gene_cor, "[[","pearson")),
spearman = unlist(lapply(gene_cor, "[[","spearman")))
#mr_cor_df = mr_cor_df %>% tidyr::pivot_longer(!precision, names_to = "method", values_to = "correlations")
mr_pearson_plot = ggplot(mr_cor_df, aes(x=precision, y = pearson,color=gene, group=gene)) + geom_point() +
geom_line() + guides(col = guide_legend(ncol = 3))
mr_pearson_plot
#mr_cor_df = mr_cor_df %>% tidyr::pivot_longer(!precision, names_to = "method", values_to = "correlations")
mr_pearson_plot = ggplot(mr_cor_df, aes(x=precision, y = pearson,color=gene, group=gene)) + geom_point() +
geom_line() + guides(col = guide_legend(ncol = 5)) +
theme(legend.title = element_text(size=1), legend.text = element_text(size=1))
mr_pearson_plot
#mr_cor_df = mr_cor_df %>% tidyr::pivot_longer(!precision, names_to = "method", values_to = "correlations")
mr_pearson_plot = ggplot(mr_cor_df, aes(x=precision, y = pearson,color=gene, group=gene)) + geom_point() +
geom_line() + guides(col = guide_legend(ncol = 5)) +
theme(legend.position = "none")
mr_pearson_plot
mr_cor_df_filter = mr_cor_df %>% filter(precision <=1000)
mr_pearson_ridge = ggplot(mr_cor_df_filter, aes(x = pearson,y = as.factor(precision), fill=as.factor(precision))) + geom_density_ridges()
library(ggridges)
mr_pearson_ridge = ggplot(mr_cor_df_filter, aes(x = pearson,y = as.factor(precision), fill=as.factor(precision))) + geom_density_ridges()
mr_pearson_ridge
mr_spearman_plot = ggplot(mr_cor_df, aes(x=precision, y = spearman,color=gene, group=gene)) + geom_point() + geom_line()
mr_spearman_plot
mr_spearman_plot = ggplot(mr_cor_df, aes(x=precision, y = spearman,color=gene, group=gene)) + geom_point() + geom_line() +
theme(legend.position = "none")
mr_spearman_plot
mr_spearman_ridge = ggplot(mr_cor_df_filter, aes(x = spearman,y = as.factor(precision), fill=as.factor(precision))) + geom_density_ridges()
mr_spearman_ridge
mr_spearman_plot = ggplot(mr_cor_df, aes(x=precision, y = spearman,color=gene, group=gene,alpha=0.5)) + geom_point() + geom_line() +
theme(legend.position = "none")
mr_spearman_plot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot(binaxis='y', stackdir='center', dotsize=0.1)
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot()
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot(dotsize=0.1) + geom_jitter(shape=16, position=position_jitter(0.2))
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot(outlier.shape = NA) #+ geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot() #+ geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_violin()+
geom_boxplot(width=0.1, fill="white")
#geom_boxplot() #+ geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_pearson_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = pearson, fill=as.factor(precision))) +
geom_boxplot() #+ geom_jitter(width = 0.2)
mr_pearson_boxplot
bannerCommenter::banner("filtering cells",emph = T)
mr_pearson_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = pearson, fill=as.factor(precision))) +
geom_boxplot() + lab(x="Precision",y="Pearson correlation")#+ geom_jitter(width = 0.2)
mr_pearson_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = pearson, fill=as.factor(precision))) +
geom_boxplot() + labs(x="Precision",y="Pearson correlation")#+ geom_jitter(width = 0.2)
mr_pearson_boxplot
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_pearson_allgenes.jpeg",
plot = mr_pearson_boxplot,
width = 7,
height = 7,
units = "in",
dpi = 100)
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_pearson_allgenes.jpeg",
plot = mr_pearson_boxplot,
width = 7,
height = 5,
units = "in",
dpi = 100)
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot() labs(x="Precision",y="Spearman correlation for all the genes across samples")#+ geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot() + labs(x="Precision",y="Spearman correlation for all the genes across samples")#+ geom_jitter(width = 0.2)
mr_spearman_boxplot
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_spearman_allgenes.jpeg",
plot = mr_pearson_boxplot,
width = 7,
height = 5,
units = "in",
dpi = 100)
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_spearman_allgenes.jpeg",
plot = mr_spearman_boxplot,
width = 7,
height = 5,
units = "in",
dpi = 100)
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot() + labs(x="Precision",y="Spearman correlation for all the genes across samples",color="Precision")#+ geom_jitter(width = 0.2)
mr_spearman_boxplot
mr_spearman_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = spearman, fill=as.factor(precision))) +
geom_boxplot() + labs(x="Precision",y="Spearman correlation for all the genes across samples",fill="Precision")#+ geom_jitter(width = 0.2)
mr_spearman_boxplot
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_spearman_allgenes.jpeg",
plot = mr_spearman_boxplot,
width = 7,
height = 5,
units = "in",
dpi = 100)
mr_pearson_boxplot = ggplot(mr_cor_df_filter, aes(x = as.factor(precision),y = pearson, fill=as.factor(precision))) +
geom_boxplot() + labs(x="Precision",y="Pearson correlation for all the genes across samples",fill="Precision") #+ geom_jitter(width = 0.2)
mr_pearson_boxplot
ggsave(filename = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Results/multiregion_benchmarking/figs/mr_gene_pearson_allgenes.jpeg",
plot = mr_pearson_boxplot,
width = 7,
height = 5,
units = "in",
dpi = 100)
mr_pearson_boxplot + geom_smooth(aes(x=as.factor(precision), y=pearson), method = "lm")
mr_pearson_boxplot + geom_smooth(aes(x=precision, y=pearson), method = "lm")
bannerCommenter::banner("scRNA or snRNA references")
bannerCommenter::banner("scRNA or snRNA reference data",emph = T)
bannerCommenter::banner("Brain data")
bannerCommenter::banner("Prefrontal cortex",bandChar = "=")
project_root <- "/Users/kaikang/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/"
load(paste0(project_root,"Data/","file_path_list.RData"))
wd$GTEx_raw_data
bannerCommenter::banner("save individual data for each tissue subtypes",emph = T)
GTEx_data_all <- fread(paste0(wd$GTEx_raw_data,'GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct'))
############################################################################
############################################################################
###                                                                      ###
###                         GTEX DATA PROCESSING                         ###
###                                                                      ###
############################################################################
############################################################################
# okay, fread is super fast, I don't need to use matlab then convert, just directly process in R is good
library(data.table)
GTEx_data_all <- fread(paste0(wd$GTEx_raw_data,'GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct'))
GTEX_data_annotation <-  fread(paste0(wd$GTEx_raw_data,'GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt'))
GTEx_data_phenotypes <-  fread(paste0(wd$GTEx_raw_data,'GTEx_Analysis_v8_Annotations_SubjectPhenotypesDS.txt'))
# keep only protein coding genes
GTEx_gtf = rtracklayer::import("~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Data/Genome_reference_RawData/gencode.v26.GRCh38.genes.gtf")
bannerCommenter::banner("GTEx data processing",emph = T)
bannerCommenter::banner("GTEx single sample data path",emph = T)
bannerCommenter::banner("GTEx single sample deconvolution workflow")
bannerCommenter::banner("GTEx single sample deconvolution workflow",emph = T)
#################################################################
##                    load multiregion data                    ##
#################################################################
mr_data = readRDS("~/Downloads/MR_data/11259716.rds")
mr_data = readRDS("~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Data/multiregion_data/MR_15413198.rda")
mr_data = mr_data_AG$`10291856`
bulk_data = mr_data$bulk
ast_data= mr_data$truth$Ast
exc_data = mr_data$truth$Exc
inh_data = mr_data$truth$Inh
mic_data = mr_data$truth$Mic_Immune
oli_data = mr_data$truth$Oli
opc_data = mr_data$truth$Opc
vas_epi_data = mr_data$truth$Vasc_Epithelia
csGEP = cbind(Ast = ast_data, Exc = exc_data, Inh = inh_data, Mic = mic_data, Oli = oli_data, Opc = opc_data, Epi = vas_epi_data)
rownames(csGEP) = rownames(bulk_data)
pheatmap::pheatmap(cor(csGEP))
# load MR region
major_markers_df = readxl::read_excel(path = "~/Dropbox/Public/MIT/Project_3_GTEx_data_analysis/Data/marker_genes/Multiregion/Marker_genes_major_cell_types.xlsx")
top_n = 10
major_top_marker = lapply(unique(major_markers_df$cluster),
FUN = function(x){
cidx = which(major_markers_df$cluster == x)
return(major_markers_df$gene[cidx[1:top_n]])
})
major_markers = unlist(major_top_marker)
one_sample = ast_data +  mic_data + oli_data + opc_data
input_data = bulk_data[,1,drop=FALSE]#bulk_data#
# gene filtering
high_exp_idx = which(input_data[,1]>10)
marker_idx = which(rownames(input_data) %in% major_markers)
filter_idx = intersect(marker_idx, high_exp_idx)
input_data_filter = input_data[ filter_idx, ,drop=FALSE]
csGEP_filter = csGEP[filter_idx,]
pheatmap::pheatmap(cor(csGEP_filter))
comm_gene = CDSeq:::intersection(list.vector = list(rownames(csGEP_filter),rownames(AD_gep)), order = "stable")
csGEP_filter_ad = csGEP_filter[comm_gene$index[[1]],]
AD_gep_filter = AD_gep[comm_gene$index[[2]],]
pheatmap::pheatmap(cor(csGEP_filter_ad,AD_gep_filter))
MR_cell = t(t(csGEP_filter_ad)/colSums(csGEP_filter_ad))
AD_cell = t(t(AD_gep_filter[,c(1,3,4,5,6,7,2)])/colSums(AD_gep_filter[,c(1,3,4,5,6,7,2)]))
plot(MR_cell[,1],AD_cell[,1])
abline(a=0,b=1)
cell_type_number = 7
beta_factor = 1000#seq(100,10000,50)
rmse_gep = rep(0,length(beta_factor))
rmse_prop = rep(0,length(beta_factor))
loglikelihood = rep(0,length(beta_factor))
BETA = t(AD_cell %*% diag(c(rep(5000,6),1000)))
BETA = t(AD_cell * 5000)
dim(BETA)
rownames(BETA)
MR_test  = CDSeq::CDSeq(bulk_data = input_data_filter[comm_gene$index[[1]],,drop=FALSE],#bulk_data_filter[,5,drop=FALSE],#input_data_filter,#
dilution_factor = 1,
beta = BETA,
alpha = 5,
cell_type_number = cell_type_number,
mcmc_iterations = 7,
cpu_number = length(cell_type_number),
verbose = TRUE)
colnames(MR_test$estGEP)
rownames(MR_test$estProp)
bannerCommenter::banner("CDSeq parameters",bandChar = "=")
bannerCommenter::banner("GTEx deconvolution",bandChar = "=")
bannerCommenter::banner("load single cell reference",bandChar = "=")
bannerCommenter::banner("load single cell reference",bandChar = "*",emph = T)
bannerCommenter::banner("CDSeq parameters",bandChar = "*",emph = T)
bannerCommenter::banner("GTEx deconvolution",bandChar = "*",emph = T)
bannerCommenter::banner("Brain Striatum")
bannerCommenter::banner("Brain Striatum",bandChar = "=")
length(seq(1000,3000,2000))
length(seq(1000,30000,2000))
255*15
length(seq(1000,20000,2000))
length(seq(1000,20000,2000))
bannerCommenter::banner("Coronary",bandChar = "=")
bannerCommenter::banner("Brain Multiregion",bandChar = "=")
